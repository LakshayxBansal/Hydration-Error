"use client";
import { useState, useEffect } from "react";

export default function RandomBad() {
  // Random value is generated during SSR, but will change on client-side rendering
  const [randomValue, setRandomValue] = useState<number>(Math.random());

  useEffect(() => {
    // Set a new random number on the client-side to simulate change
    setRandomValue(Math.random());
  }, []);

  return (
    <div className="min-h-screen bg-gray-100 p-8">
      <h1 className="text-3xl font-bold text-center text-gray-800 mb-6">
        Random value hydration error (bad practice)
      </h1>
      <p className="text-lg text-center text-gray-600 mb-4">
        The random value is generated during SSR, but will change on client-side rendering.
      </p>
      <p className="text-md text-center text-gray-600 mb-8">
        Click the button below to see the random value change on client-side.
      </p>
      <div className="flex justify-center mb-6">
        <button
          className="bg-blue-500 text-white px-6 py-3 rounded-lg hover:bg-blue-600 transition"
          onClick={() => setRandomValue(Math.random())}
        >
          Change random value
        </button>
      </div>
      <p className="text-xl text-center text-gray-800">
        The random value is: <span className="font-semibold">{randomValue}</span>
      </p>
      <br />
      <br />
      <br />

    </div>
  );
}


/*
The issue arises when random values are generated during SSR and differ on the client side, which causes hydration errors. Hydration expects the initial HTML from the server to match the HTML rendered on the client.

Why is this Bad?
	1.	SSR mismatch: The initial value rendered on the server (Math.random()) is different from the one on the client after hydration (due to the useEffect hook setting a new random value).
    
	2.	Hydration Error: React will throw a warning when it sees that the initial HTML generated on the server does not match the HTML generated by React on the client.

*/